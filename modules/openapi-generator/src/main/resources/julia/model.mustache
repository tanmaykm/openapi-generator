{{>partial_header}}
{{#models}}
{{#model}}
{{#isAlias}}
if !isdefined(@__MODULE__, :{{classname}})
    const {{classname}} = {{dataType}}
else
    @warn("Skipping redefinition of {{classname}} to {{dataType}}")
end
{{/isAlias}}{{^isAlias}}
@doc raw"""{{#description}}{{description}}
{{/description}}

    {{classname}}(;
{{#allVars}}
        {{{name}}}={{#defaultValue}}{{{defaultValue}}}{{/defaultValue}}{{^defaultValue}}nothing{{/defaultValue}},
{{/allVars}}
    )

{{#allVars}}
    - {{{name}}}::{{datatype}}{{#description}} : {{description}}{{/description}}
{{/allVars}}
"""
Base.@kwdef mutable struct {{classname}} <: OpenAPIClient.APIModel
{{#allVars}}
    {{{name}}} = {{#defaultValue}}{{{defaultValue}}}{{/defaultValue}}{{^defaultValue}}nothing{{/defaultValue}} # spec type: Union{ Nothing, {{datatype}} }
{{/allVars}}

    function {{classname}}({{#allVars}}{{{name}}}, {{/allVars}})
        {{#allVars}}
        validate_property({{classname}}, Symbol("{{baseName}}"), {{{name}}})
        {{/allVars}}
        return new({{#allVars}}{{{name}}}, {{/allVars}})
    end
end # type {{classname}}

const _property_types_{{classname}} = Dict{Symbol,String}({{#allVars}}Symbol("{{baseName}}")=>"{{datatype}}", {{/allVars}})
OpenAPIClient.property_type(::Type{ {{classname}} }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_{{classname}}[name]))}

function check_required(o::{{classname}})
{{#allVars}}
{{^isEnum}}
{{#required}}
    o.{{{name}}} === nothing && (return false)
{{/required}}
{{/isEnum}}
{{/allVars}}
    true
end

function validate_property(::Type{ {{classname}} }, name::Symbol, val)
{{#allVars}}
{{#isEnum}}
    if name === Symbol("{{baseName}}")
        OpenAPIClient.validate_param(name, "{{classname}}", :enum, val, [{{#allowableValues}}{{#values}}"{{{this}}}"{{^-last}}, {{/-last}}{{/values}}{{/allowableValues}}])
    end
{{/isEnum}}
{{^isEnum}}
{{#hasValidation}}
    if name === Symbol("{{baseName}}")
{{#maxLength}}
        OpenAPIClient.validate_param(name, "{{classname}}", :maxLength, val, {{maxLength}})
{{/maxLength}}
{{#minLength}}
        OpenAPIClient.validate_param(name, "{{classname}}", :minLength, val, {{minLength}})
{{/minLength}}
{{#maximum}}
        OpenAPIClient.validate_param(name, "{{classname}}", :maximum, val, {{maximum}}, {{#exclusiveMaximum}}true{{/exclusiveMaximum}}{{^exclusiveMaximum}}false{{/exclusiveMaximum}})
{{/maximum}}
{{#minimum}}
        OpenAPIClient.validate_param(name, "{{classname}}", :minimum, val, {{minimum}}, {{#exclusiveMinimum}}true{{/exclusiveMinimum}}{{^exclusiveMinimum}}false{{/exclusiveMinimum}})
{{/minimum}}
{{#maxItems}}
        OpenAPIClient.validate_param(name, "{{classname}}", :maxItems, val, {{maxItems}})
{{/maxItems}}
{{#minItems}}
        OpenAPIClient.validate_param(name, "{{classname}}", :minItems, val, {{minItems}})
{{/minItems}}
    end
{{/hasValidation}}
{{/isEnum}}
{{/allVars}}
end{{/isAlias}}{{/model}}{{/models}}
